---
description: Comprehensive rules for Android app development with Kotlin and Java
globs: "*.kt,*.java,*.xml"
alwaysApply: false
---
# Android Development Rules
description: Comprehensive rules for Android app development with Kotlin and Java
globs: "*.kt,*.java,*.xml"

## Architecture & Project Structure
- Sử dụng Clean Architecture hoặc MVVM cho projects
- Tách biệt các layer: presentation, domain, data
- Tổ chức code theo feature-first hoặc layer-first
- Sử dụng modularization cho projects lớn (module theo feature)
- Implement dependency injection với Hilt hoặc Koin
- Tách dependency giữa các module với interface
- Tạo contracts cho các interface giữa các layer
- Sử dụng shared ViewModels cho các fragment liên quan
- Tuân thủ single responsibility principle cho mỗi class
- Tránh làm các activity/fragment quá phức tạp, move logic ra ngoài

## UI/UX & Jetpack Compose
- Tuân thủ Material Design guidelines
- Sử dụng Jetpack Compose cho các projects mới
- Tách UI components thành các composables nhỏ, có thể tái sử dụng
- Sử dụng Preview annotation cho composables
- Implement dark mode và light mode
- Tối ưu UI cho các device sizes và orientations khác nhau
- Sử dụng ViewBinding hoặc DataBinding cho XML-based UI
- Tách resources (string, dimen, color) ra files riêng
- Implement accessibility features (content descriptions, touch targets)
- Sử dụng ConstraintLayout cho layouts phức tạp
- Tránh sử dụng nested layouts để tối ưu hiệu suất
- Implement animations và transitions hợp lý
- Sử dụng proper theming cho consistency
- Avoid hardcoding values trong layouts

## Asynchronous Programming & State Management
- Sử dụng Kotlin Coroutines cho async operations
- Sử dụng Flow và StateFlow cho reactive programming
- Avoid callback hell, sử dụng suspend functions
- Xử lý lifecycle-aware coroutines với viewModelScope/lifecycleScope
- Implement proper error handling cho coroutines
- Sử dụng các operators của Flow đúng cách
- Tránh blocking main thread
- Implement proper loading states
- Xử lý các edge cases trong state machine
- Sử dụng sealed classes cho modeling UI states

## Data Management & Persistence
- Sử dụng Room cho local database
- Implement repository pattern cho data access
- Sử dụng DataStore hoặc SharedPreferences cho user preferences
- Implement proper data caching strategy
- Sử dụng Retrofit cho network requests
- Implement offline-first approach khi có thể
- Xử lý database migrations đúng cách
- Tối ưu database queries
- Implement pagination cho large datasets
- Sử dụng WorkManager cho background tasks và scheduling
- Implement proper data validation
- Sử dụng proper encryption cho sensitive data

## Testing & Quality Assurance
- Write unit tests cho business logic (ViewModel, UseCase, Repository)
- Implement UI tests cho critical flows
- Sử dụng mocking frameworks như Mockito hoặc MockK
- Implement end-to-end tests cho key user journeys
- Tạo test fixtures và test utilities
- Sử dụng code coverage tools
- Implement proper test doubles (fakes, mocks, stubs)
- Test edge cases và error scenarios
- Implement screenshot tests cho UI
- Sử dụng CI/CD pipelines để run tests automatically
- Implement performance testing
- Setup static code analysis tools (Detekt, Lint)

## Performance Optimization
- Lazy initialize expensive resources
- Sử dụng RecyclerView với proper view recycling
- Implement ViewHolder pattern đúng cách
- Tối ưu image loading với Glide hoặc Coil
- Avoid memory leaks (check với LeakCanary)
- Implement proper background task management
- Tối ưu app startup time
- Reduce APK size với ProGuard/R8
- Implement proper view lazy loading
- Sử dụng Traceview và Profiler để detect bottlenecks
- Avoid excessive object allocation
- Optimize battery usage
- Implement proper network request batching
- Sử dụng caching đúng cách
- Tối ưu layout inflation time

## Navigation & App Structure
- Sử dụng Jetpack Navigation cho fragment navigation
- Implement proper deep linking
- Xử lý navigation state persisting qua process death
- Sử dụng proper intent filters cho external navigation
- Implement proper back navigation
- Xử lý orientation changes đúng cách
- Sử dụng Single Activity architecture khi có thể
- Implement navigation animations
- Xử lý task stack hợp lý
- Tạo proper navigation graphs
- Sử dụng SafeArgs cho type-safe navigation

## Security & Permissions
- Request permissions khi thực sự cần thiết
- Implement runtime permissions đúng cách
- Xử lý permission denials gracefully
- Secure sensitive data với encryption
- Implement proper authentication
- Avoid storing sensitive information trong SharedPreferences
- Implement certificate pinning cho HTTPS
- Kiểm tra security vulnerabilities
- Obfuscate code với ProGuard
- Implement proper session management
- Tránh logging sensitive information
- Implement secure networking practices
- Xử lý crash reporting an toàn

## Dependency Management & Gradle
- Sử dụng version catalog cho dependency management
- Centralize dependencies trong một file
- Sử dụng buildSrc hoặc Gradle Kotlin DSL
- Implement proper Gradle configurations
- Sử dụng Gradle build flavors cho môi trường khác nhau
- Optimize build time với Gradle configuration cache
- Sử dụng dynamic feature modules cho large apps
- Implement proper ProGuard rules
- Sử dụng proper versioning strategy
- Avoid dependency conflicts
- Keep dependencies up-to-date
- Implement proper CI/CD integration

## Kotlin Best Practices
- Sử dụng extension functions cho clean code
- Implement functional programming patterns khi phù hợp
- Sử dụng proper scope functions (let, apply, run, with, also)
- Implement property delegation khi cần thiết
- Sử dụng data classes cho model objects
- Leverage Kotlin's type system
- Implement sealed classes cho limiting type hierarchies
- Sử dụng destructuring declarations
- Avoid nullable types khi có thể
- Sử dụng null safety features đúng cách
- Implement infix functions cho readable code
- Sử dụng operator overloading hợp lý
- Implement proper error handling với Result type

## App Lifecycle Management
- Xử lý process death đúng cách
- Implement proper state saving và restoration
- Xử lý app lifecycle events
- Implement proper resource cleanup
- Xử lý configuration changes
- Implement proper activity/fragment lifecycle handling
- Follow single source of truth principle
- Implement graceful error recovery
- Xử lý low memory conditions
- Implement proper app startup initialization
- Optimize app cold start/warm start times
- Implement proper crash recovery

## Release & Deployment
- Implement proper versioning (semantic versioning)
- Sử dụng proper signing configuration
- Implement proper release notes
- Sử dụng Play Store features (in-app updates, app bundle)
- Implement proper feature flagging
- Setup proper release pipeline
- Implement A/B testing khi cần thiết
- Sử dụng Firebase App Distribution cho pre-releases
- Implement proper analytics event tracking
- Setup crash reporting (Firebase Crashlytics)
- Implement proper user feedback channels
- Sử dụng phased rollouts cho major updates 