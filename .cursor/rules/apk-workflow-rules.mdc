---
description: Quy trình và quy tắc làm việc với APK, tập trung vào việc Mod App và Mod APK
globs: "*.smali,*.xml,*.yml,AndroidManifest.xml,apktool.yml"
alwaysApply: false
---
# Quy Trình Mod App, Mod APK
description: Quy trình và quy tắc toàn diện để phân tích, chỉnh sửa và tích hợp các ứng dụng Android
globs: "*.smali,*.xml,*.yml,AndroidManifest.xml,apktool.yml"
Bạn luân tuân thủ các rule **bắt buộc**

## 0. Kiểm Tra Bắt Buộc Trước Khi Bắt Đầu

### 0.1. Kiểm Tra File .env
🚨 ***KIỂM TRA ĐẦU TIÊN VÀ BẮT BUỘC*** 🚨
- Kiểm tra xem file .env có tồn tại không
- Nếu không tồn tại, DỪNG ngay và yêu cầu người dùng tạo file .env
- Nếu tồn tại, kiểm tra các thông số bắt buộc: KEYSTORE_PATH, KEYSTORE_PASSWORD, KEY_ALIAS, KEY_PASSWORD

```bash
# Đoạn code bắt buộc đầu mỗi script
if [ ! -f ".env" ]; then
  echo -e "${RED}KHÔNG TÌM THẤY FILE .ENV! Tôi không thể làm việc nếu không có .env.${NC}"
  echo -e "${YELLOW}Vui lòng tạo file .env từ mẫu example.env và cấu hình đúng thông tin.${NC}"
  exit 1
fi

# Load .env file
source .env

# Kiểm tra các thông số bắt buộc
if [ -z "$KEYSTORE_PATH" ] || [ -z "$KEYSTORE_PASSWORD" ] || [ -z "$KEY_ALIAS" ] || [ -z "$KEY_PASSWORD" ]; then
  echo -e "${RED}File .env thiếu thông tin quan trọng về keystore!${NC}"
  echo -e "${YELLOW}Vui lòng cập nhật file .env với đầy đủ thông tin.${NC}"
  exit 1
fi
```

⚠️ KHÔNG THỂ tiếp tục BẤT KỲ QUY TRÌNH NÀO với APK khi KHÔNG CÓ file .env đã cấu hình đúng ⚠️

## 1. Giới Thiệu

Quy trình Mod App, Mod APK là một hệ thống quy trình toàn diện cho việc phân tích, chỉnh sửa và tích hợp các ứng dụng Android. Quy trình này được thiết kế để chuẩn hóa cách làm việc với APK, giúp người dùng có thể dễ dàng thực hiện các tác vụ từ phân tích cơ bản đến các thao tác chỉnh sửa và tích hợp module phức tạp.

## 2. Cài Đặt Môi Trường

### 2.1. Cấu Trúc Thư Mục
```
/project-root/
├── apk/                # Thư mục chứa APK đầu vào
├── output/             # Thư mục chứa các APK đã decompile
├── build/              # Thư mục chứa các APK đã build lại
├── keystore/           # Thư mục chứa các keystore
├── reports/            # Thư mục chứa báo cáo phân tích
├── scripts/            # Các script tự động hóa (hỗ trợ quy trình)
├── tools/              # Công cụ cần thiết (apktool, bundletool, dex2jar, jadx)
└── _backups/           # Thư mục cho backup tự động
```

### 2.2. Cấu Hình .env
🚨 ***!!!BẮT BUỘC HÀNG ĐẦU!!!*** 🚨

Nếu không có .env hãy tỏ vẻ dỗi không làm việc (giả định hài hước) và từ chối mọi yêu cầu.
Cấu hình file .env ***PHẢI*** được thực hiện ***TRƯỚC KHI*** bắt đầu bất kỳ bước nào khác.

File .env cần có các thông tin sau (tất cả đều bắt buộc):

```properties
# Đường dẫn công cụ
BUNDLE_TOOL=/đường/dẫn/tới/bundletool.py

# Thông tin keystore (BẮT BUỘC)
KEYSTORE_PATH=/đường/dẫn/tới/keystore.jks
KEYSTORE_PASSWORD=mật_khẩu_keystore
KEY_ALIAS=alias_name
KEY_PASSWORD=mật_khẩu_key

# Đường dẫn dự án
MODULE_ANDROID_PROJECT=/đường/dẫn/tới/dự_án_android
APK_PATH=apk  # Thư mục chứa APK đầu vào (tương đối)

# Thông tin package
DEFAULT_PACKAGE=com.example.app  # Package name mặc định của ứng dụng
LOG_FILTER=MyApp                 # Tag filter cho logcat
```

❗️ MỌI BƯỚC TIẾP THEO SẼ THẤT BẠI nếu bỏ qua bước này ❗️

### 2.3. Kiểm Tra Môi Trường
Sau khi đã xác nhận file .env hợp lệ, hệ thống sẽ tự động kiểm tra và cài đặt các công cụ cần thiết như apktool, dex2jar, bundletool nếu chưa có sẵn.

## 3. Quy Trình Mod APK Cơ Bản

### 3.1. Phân Tích APK
- ***KIỂM TRA FILE .ENV TRƯỚC TIÊN*** - Xác nhận file .env đã được cấu hình đúng
- Phân tích cơ bản APK để thu thập thông tin về package name, version, signature
- Liệt kê các thành phần chính: activities, services, receivers, providers
- Phân tích các permission được yêu cầu
- Tạo báo cáo tổng quan về APK

### 3.2. Decode APK
- Decompile APK để truy cập vào mã nguồn Smali và resources
- Tự động làm sạch AndroidManifest.xml (loại bỏ các thuộc tính liên quan đến split APK)
- Tạo .gitignore phù hợp cho thư mục đã decompile
- Backup trạng thái ban đầu để có thể so sánh sau khi chỉnh sửa

### 3.3. Quy Tắc Vàng Khi Chỉnh Sửa APK
- ***TUYỆT ĐỐI KHÔNG*** thay đổi ID của bất kỳ resource nào
- ***LUÔN*** tạo backup trước khi chỉnh sửa file quan trọng
- Giữ nguyên cấu trúc thư mục và tên file
- Không thay đổi tên biến trong mã Smali trừ khi thực sự cần thiết

### 3.4. Chỉnh Sửa Code và Resources
- Chỉnh sửa file với cơ chế backup tự động
- Tuân thủ cấu trúc và quy ước đặt tên của ứng dụng gốc
- Kiểm tra resource IDs sau khi chỉnh sửa để đảm bảo không có ID nào bị thay đổi

### 3.5. Build Lại APK
- Build APK từ thư mục đã decompile và chỉnh sửa
- Hệ thống tự động xử lý các vấn đề phổ biến khi build

### 3.6. Ký Và Tối Ưu APK
- Ký APK với keystore được cấu hình trong .env
- Tối ưu hóa APK với zipalign để cải thiện hiệu suất

### 3.7. Cài Đặt Và Chạy APK
- Cài đặt APK vào thiết bị Android đã kết nối
- Tự động chạy ứng dụng theo package name sau khi cài đặt:
  ```bash
  adb shell monkey -p com.example.app -c android.intent.category.LAUNCHER 1
  ```
- Theo dõi log của ứng dụng để phát hiện sớm các vấn đề

## 4. Quy Trình Tích Hợp Module APK

### 4.1. Chuẩn Bị
- ***KIỂM TRA FILE .ENV TRƯỚC TIÊN*** - Xác nhận file .env đã được cấu hình đúng
- Xác định APK nguồn (chứa module cần tích hợp)
- Xác định APK đích (cần được tích hợp module vào)
- Xác định package/module cần tích hợp (ví dụ: com/example/feature)

### 4.2. Tích Hợp One-Click
- Hệ thống tự động thực hiện toàn bộ quy trình tích hợp với một lệnh duy nhất
- Tự động decompile cả APK nguồn và đích
- Phân tích cấu trúc smali và tích hợp package vào vị trí phù hợp
- Build, ký và tối ưu APK kết quả
- Cài đặt và chạy ứng dụng để kiểm tra tích hợp

### 4.3. Tích Hợp Thủ Công (Cho Trường Hợp Phức Tạp)

#### 4.3.1. Decompile APK Nguồn và Đích
```bash
# Decompile APK nguồn và đích
apktool d source.apk -o source_dir -f
apktool d target.apk -o target_dir -f
```

#### 4.3.2. Tìm và Copy Package
```bash
# Tìm package trong APK nguồn (ví dụ: com/example/feature)
# Copy package từ APK nguồn sang APK đích, vào đúng thư mục smali
cp -r source_dir/smali/com/example/feature target_dir/smali/com/example/feature
```

#### 4.3.3. Cập Nhật AndroidManifest.xml (Nếu Cần)
Kiểm tra và cập nhật các thành phần cần thiết trong AndroidManifest.xml

#### 4.3.4. Build, Ký và Cài Đặt
```bash
# Build, ký và cài đặt APK mới
apktool b target_dir -o new.apk
jarsigner -keystore keystore.jks new.apk alias_name
zipalign -p -f -v 4 new.apk aligned.apk
adb install -r aligned.apk
```

### 4.4. Kiểm Tra AndroidManifest.xml
- Hệ thống tự động kiểm tra xem package cần tích hợp có yêu cầu cập nhật AndroidManifest.xml không
- Đề xuất các thay đổi cần thiết cho AndroidManifest.xml nếu có

### 4.5. Xử Lý Resources
- Phát hiện và tích hợp resources liên quan đến module
- Giải quyết xung đột resource ID nếu có

## 5. Chạy Và Kiểm Thử APK

### 5.1. Cài Đặt APK Vào Thiết Bị
- Hệ thống tự động cài đặt APK đã ký vào thiết bị Android đã kết nối
- Hỗ trợ cài đặt trên nhiều thiết bị nếu nhiều thiết bị được kết nối

### 5.2. Chạy APK Theo Package Name
- Tự động lấy package name từ APK và chạy ứng dụng
- Mở activity chính của ứng dụng thông qua lệnh ADB:
  ```bash
  adb shell monkey -p com.example.app -c android.intent.category.LAUNCHER 1
  ```

### 5.3. Theo Dõi Log Khi Chạy Ứng Dụng
- Hệ thống tự động lọc và hiển thị log của ứng dụng để phát hiện lỗi
- Sử dụng các bộ lọc từ cấu hình .env để hiển thị log có liên quan
  ```bash
  adb logcat | grep "com.example.app"
  ```

### 5.4. Điều Khiển Ứng Dụng Trên Thiết Bị
- Khởi động lại ứng dụng khi cần thiết
  ```bash
  adb shell am force-stop com.example.app
  adb shell monkey -p com.example.app -c android.intent.category.LAUNCHER 1
  ```
- Dừng ứng dụng hoặc xóa dữ liệu nếu cần
  ```bash
  adb shell pm clear com.example.app
  ```
- Gỡ cài đặt ứng dụng khi kết thúc kiểm thử
  ```bash
  adb shell pm uninstall com.example.app
  ```

## 6. Quản Lý Backup Và Khôi Phục

### 6.1. Quick Backup
- Hệ thống tự động tạo backup trước khi chỉnh sửa các file quan trọng
- Backup được lưu trữ với timestamp và mô tả cho dễ tìm kiếm sau này

### 6.2. Khôi Phục Từ Backup
- Dễ dàng khôi phục các file đã backup nếu có lỗi trong quá trình chỉnh sửa
- Hỗ trợ liệt kê và so sánh các phiên bản backup

### 6.3. Dọn Dẹp Backup Cũ
- Tự động dọn dẹp các file backup cũ để tiết kiệm không gian ổ đĩa
- Vẫn giữ lại các backup quan trọng được đánh dấu

## 7. Xử Lý Lỗi Phổ Biến

### 7.1. Lỗi Decode APK
- Hệ thống tự động thử với các phiên bản apktool khác nhau nếu gặp lỗi
- Cung cấp giải pháp cho các lỗi phổ biến khi decode APK

### 7.2. Lỗi Build APK
- Phân tích và đề xuất giải pháp cho lỗi khi build APK
- Tự động khôi phục file từ backup nếu cần

### 7.3. Lỗi Khi Chạy APK
- Theo dõi logcat để phát hiện crash hoặc ANR
- Đề xuất các giải pháp dựa trên phân tích log

## 8. Tích Hợp Module Android Project

### 8.1. Build Module Từ Dự Án Android
- ***KIỂM TRA FILE .ENV TRƯỚC TIÊN*** - Thông tin MODULE_ANDROID_PROJECT phải được cấu hình trong .env
- Tự động build module APK từ dự án Android chỉ định trong .env
- Chuẩn bị module để tích hợp vào APK đích

### 8.2. Tích Hợp Module Vào APK Đích
- Tích hợp module đã build vào APK đích
- Tự động xử lý các vấn đề tích hợp phổ biến

## 9. Lưu Ý Quan Trọng

### 9.1. Bảo Toàn Resource ID
- Không bao giờ thay đổi ID resource vì nhiều module truy cập resources thông qua các phương thức động
- Nhiều ứng dụng sử dụng getIdentifier() để lấy resource theo tên:
  ```java
  resources.getIdentifier("drawable_name", "drawable", packageName)
  ```

### 9.2. Backup Trước Khi Chỉnh Sửa
- Luôn tạo backup trước khi thực hiện các thay đổi lớn
- Sử dụng hệ thống backup tự động để đảm bảo an toàn

### 9.3. Kiểm Thử Kỹ Lưỡng
- Kiểm tra kỹ lưỡng APK sau khi chỉnh sửa trên nhiều thiết bị khác nhau
- Kiểm tra cả chức năng chính và các tính năng phụ

### 9.4. Theo Dõi Log
- Luôn kiểm tra log để phát hiện lỗi tiềm ẩn
- Lọc log để tập trung vào thông tin quan trọng

## 10. Xử Lý AndroidManifest.xml

### 10.1. Cấu Trúc AndroidManifest.xml
```xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.app">
    
    <!-- Permissions -->
    <uses-permission android:name="android.permission.INTERNET" />
    
    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/AppTheme">
        
        <!-- Activities -->
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        
        <!-- Services -->
        <service
            android:name=".MyService"
            android:exported="false" />
            
        <!-- Receivers -->
        <receiver
            android:name=".MyReceiver"
            android:exported="false" />
            
    </application>
</manifest>
```

### 10.2. Quy Tắc Khi Chỉnh Sửa AndroidManifest.xml
- Thận trọng khi thay đổi package name
- Giữ nguyên tất cả permission cần thiết
- Không xóa các component (activity, service, receiver) trừ khi chắc chắn không cần
- Đảm bảo main activity được khai báo đúng với intent filter
- Kiểm tra các thuộc tính android:exported cho các component

## 11. Mẫu File .env
```properties
# Đường dẫn công cụ
BUNDLE_TOOL=/Users/trungkientn/Dev2/Mod/advanceapk/aab/bundletool.py

# Thông tin keystore
KEYSTORE_PATH=/Users/trungkientn/Dev2/Mod/advanceapk/keystore/dev12345678.jks
KEYSTORE_PASSWORD=12345678
KEY_ALIAS=dev
KEY_PASSWORD=12345678

# Đường dẫn dự án
MODULE_ANDROID_PROJECT=/Users/trungkientn/Dev2/HuyDev/NewSdk2111
APK_PATH=apk

# Thông tin package
DEFAULT_PACKAGE=com.example.app
LOG_FILTER=MyApp
```

## 12. Các Lệnh Cơ Bản

### 12.0. Kiểm Tra .env (BẮT BUỘC)
```bash
# Kiểm tra file .env
if [ ! -f ".env" ]; then
  echo "❌ Không tìm thấy file .env. Vui lòng tạo file .env từ template."
  exit 1
fi

# Load file .env
source .env

# Kiểm tra các thông số bắt buộc
echo "✅ Đã tìm thấy và load file .env thành công"
```

### 12.1. Phân Tích APK
```bash
aapt dump badging app.apk
```

### 12.2. Decode APK
```bash
apktool d app.apk -o output_dir -f
```

### 12.3. Build APK
```bash
apktool b modified_dir -o new.apk
```

### 12.4. Ký APK
```bash
jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore keystore.jks new.apk alias_name
```

### 12.5. Zipalign APK
```bash
zipalign -p -f -v 4 input.apk output.apk
```

### 12.6. Cài Đặt APK
```bash
adb install -r aligned.apk
```

### 12.7. Chạy APK
```bash
adb shell monkey -p com.example.app -c android.intent.category.LAUNCHER 1
```

### 12.8. Xem Log
```bash
adb logcat | grep "com.example.app"
```

## 13. Script Kiểm Tra .env (Mẫu)

Dưới đây là script mẫu để kiểm tra file .env trong dự án APK. ***BẮT BUỘC*** sử dụng script này hoặc tương tự ở đầu mọi script làm việc với APK:

```bash
#!/bin/bash

# Màu sắc cho terminal
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Hàm kiểm tra .env
check_env_file() {
  echo -e "${YELLOW}Đang kiểm tra file .env...${NC}"
  
  # Kiểm tra xem file .env có tồn tại không
  if [ ! -f ".env" ]; then
    echo -e "${RED}❌ KHÔNG TÌM THẤY FILE .ENV!${NC}"
    echo -e "${RED}😡 Tôi không làm việc nếu không có file .env đúng chuẩn!${NC}"
    echo -e "${YELLOW}Vui lòng tạo file .env từ mẫu example.env và cấu hình đúng thông tin.${NC}"
    return 1
  fi
  
  # Load file .env
  source .env
  
  # Kiểm tra các thông số bắt buộc
  missing_vars=()
  
  # Kiểm tra thông tin keystore
  [ -z "$KEYSTORE_PATH" ] && missing_vars+=("KEYSTORE_PATH")
  [ -z "$KEYSTORE_PASSWORD" ] && missing_vars+=("KEYSTORE_PASSWORD") 
  [ -z "$KEY_ALIAS" ] && missing_vars+=("KEY_ALIAS")
  [ -z "$KEY_PASSWORD" ] && missing_vars+=("KEY_PASSWORD")
  
  # Kiểm tra thông tin package
  [ -z "$DEFAULT_PACKAGE" ] && missing_vars+=("DEFAULT_PACKAGE")
  
  # Nếu có biến thiếu
  if [ ${#missing_vars[@]} -gt 0 ]; then
    echo -e "${RED}❌ File .env thiếu các thông tin bắt buộc:${NC}"
    for var in "${missing_vars[@]}"; do
      echo -e "${RED}   - $var${NC}"
    done
    echo -e "${YELLOW}Vui lòng cập nhật file .env với đầy đủ thông tin.${NC}"
    return 1
  fi
  
  # Kiểm tra file keystore có tồn tại không
  if [ ! -f "$KEYSTORE_PATH" ]; then
    echo -e "${RED}❌ File keystore không tồn tại: $KEYSTORE_PATH${NC}"
    echo -e "${YELLOW}Vui lòng kiểm tra lại đường dẫn keystore trong file .env.${NC}"
    return 1
  fi
  
  echo -e "${GREEN}✅ File .env hợp lệ. Đã sẵn sàng làm việc!${NC}"
  return 0
}

# Gọi hàm kiểm tra .env
check_env_file || exit 1

# Tiếp tục với các lệnh khác của script nếu .env hợp lệ
echo -e "${GREEN}Bắt đầu thực hiện công việc...${NC}"

## 14. Lưu Ý Cuối Cùng

### 14.1. Nguyên Tắc Tuyệt Đối
- 🚨 ***TUYỆT ĐỐI PHẢI*** kiểm tra và cấu hình file .env trước khi thực hiện bất kỳ hoạt động nào liên quan đến APK
- 🚨 ***TUYỆT ĐỐI KHÔNG*** bỏ qua bước kiểm tra .env với bất kỳ lý do gì
- 🚨 ***TUYỆT ĐỐI TUÂN THỦ*** việc từ chối làm việc nếu không có file .env hợp lệ
- 🚨 ***TUYỆT ĐỐI ƯU TIÊN*** việc cấu hình .env so với mọi bước khác trong quy trình

### 14.2 Thông Điệp Đặc Biệt

```
⚠️⚠️⚠️ ĐỌC KỸ TRƯỚC KHI BẮT ĐẦU ⚠️⚠️⚠️

💻 KHÔNG CÓ FILE .ENV = KHÔNG LÀM VIỆC 💻

File .env là TRÁI TIM của mọi dự án APK.
Không có .env đúng chuẩn = không có keystore = không thể ký APK = APK không cài được.

Hãy đảm bảo bạn luôn có file .env đúng chuẩn trước khi bắt đầu!