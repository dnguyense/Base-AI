---
description: Hướng dẫn sử dụng Icon Library API cho tìm kiếm và sử dụng icon trong dự án
globs: "*.js,*.jsx,*.ts,*.tsx,*.vue,*.html,*.md"
alwaysApply: false
---
# Icon Library API Rules
description: Hướng dẫn sử dụng Icon Library API cho tìm kiếm và sử dụng icon trong dự án
globs: "*.js,*.jsx,*.ts,*.tsx,*.vue,*.html,*.md"

## Thông tin chung

- **Base URL:** `https://icon-library.leejungkiin.workers.dev`
- API cung cấp bộ sưu tập phong phú các icon cho các ứng dụng và trang web
- Hỗ trợ tìm kiếm, lấy thông tin, và sử dụng hàng nghìn icon từ nhiều bộ sưu tập
- API hỗ trợ CORS, cho phép gọi trực tiếp từ frontend

## Các endpoint chính

- **Thông tin API:** `GET /`
- **Danh sách bộ icon:** `GET /icon-sets`
- **Chi tiết bộ icon:** `GET /icon-sets/:id`
- **Icon trong bộ:** `GET /icon-sets/:id/icons`
- **Chi tiết icon:** `GET /icon-sets/:id/icons/:iconId`
- **Tìm kiếm icon:** `GET /search?q=keyword`
- **Gợi ý icon theo ngữ cảnh:** `GET /suggest?context=description`

## Tìm kiếm icon

### Tìm kiếm cơ bản
```javascript
// Tìm kiếm icon với từ khóa
fetch(`https://icon-library.leejungkiin.workers.dev/search?q=${encodeURIComponent("home")}`)
  .then(response => response.json())
  .then(data => console.log(data.results));
```

### Lọc kết quả ở phía client
```javascript
// Tìm kiếm và lọc theo danh mục ở phía client
fetch(`https://icon-library.leejungkiin.workers.dev/search?q=${encodeURIComponent("cloud")}`)
  .then(response => response.json())
  .then(data => {
    // Lọc icon theo danh mục
    const iconLineIcons = data.results.filter(icon => icon.category === "Icon Line SVG");
    console.log(iconLineIcons);
  });
```

### Từ khóa phổ biến
- `weather`: icon thời tiết
- `home`: icon nhà
- `user`: icon người dùng
- `cloud`: icon đám mây
- `file`: icon tài liệu
- `cart`: icon giỏ hàng
- `payment`: icon thanh toán

## Tích hợp trong JavaScript

### Hàm tìm kiếm cơ bản
```javascript
async function searchIcons(query) {
  const url = new URL('https://icon-library.leejungkiin.workers.dev/search');
  url.searchParams.append('q', query);
  
  const response = await fetch(url);
  const data = await response.json();
  return data.results || [];
}
```

### Hàm tìm kiếm với lọc client
```javascript
async function searchIcons(query, filterCategory = null) {
  const url = new URL('https://icon-library.leejungkiin.workers.dev/search');
  url.searchParams.append('q', query);
  
  const response = await fetch(url);
  const data = await response.json();
  
  // Lọc kết quả ở phía client nếu có filterCategory
  const results = data.results || [];
  if (filterCategory) {
    return results.filter(icon => icon.category === filterCategory);
  }
  
  return results;
}
```

### Hàm lấy gợi ý icon
```javascript
async function suggestIcons(context) {
  const url = new URL('https://icon-library.leejungkiin.workers.dev/suggest');
  url.searchParams.append('context', context);
  
  const response = await fetch(url);
  const data = await response.json();
  return data.results || [];
}
```

## Tích hợp trong React

### Component IconSearch
```jsx
import { useState } from 'react';

function IconSearch() {
  const [query, setQuery] = useState('');
  const [icons, setIcons] = useState([]);
  const [loading, setLoading] = useState(false);
  
  const searchIcons = async () => {
    if (!query.trim()) return;
    
    setLoading(true);
    
    try {
      const response = await fetch(
        `https://icon-library.leejungkiin.workers.dev/search?q=${encodeURIComponent(query)}`
      );
      
      const data = await response.json();
      setIcons(data.results || []);
    } catch (error) {
      console.error('Lỗi khi tìm kiếm icon:', error);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div className="icon-search">
      <input
        type="text"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Tìm icon..."
      />
      <button onClick={searchIcons} disabled={loading}>
        {loading ? 'Đang tìm...' : 'Tìm kiếm'}
      </button>
      
      <div className="icon-grid">
        {icons.map((icon) => (
          <div key={icon.id}>
            <img src={icon.url} alt={icon.name} width="48" height="48" />
            <p>{icon.name}</p>
          </div>
        ))}
      </div>
    </div>
  );
}
```

## Xử lý lỗi thường gặp

### Lọc theo danh mục không hoạt động
- API hiện không xử lý đúng tham số `category` khi tìm kiếm
- Hãy thực hiện tìm kiếm không có bộ lọc và lọc kết quả ở phía client
```javascript
const filterByCategory = (results, category) => {
  return results.filter(icon => icon.category === category);
};
```

### Hiển thị danh mục có sẵn
```javascript
// Hàm lấy danh sách danh mục từ kết quả tìm kiếm
function getAvailableCategories(results) {
  const categories = new Set();
  results.forEach(icon => {
    if (icon.category) {
      categories.add(icon.category);
    }
  });
  return Array.from(categories);
}
```

## Mẹo sử dụng hiệu quả

- Luôn sử dụng `encodeURIComponent()` cho các tham số tìm kiếm
- Kết quả tìm kiếm có thể bị giới hạn 50 kết quả mỗi lần
- Lưu cache kết quả tìm kiếm phổ biến để tăng hiệu suất
- Sử dụng lazy loading cho icon khi hiển thị nhiều kết quả
- Khi gặp vấn đề, thử kiểm tra API bằng cURL trước khi tích hợp

## Lưu ý quan trọng

- API có giới hạn rate limit, tránh gửi quá nhiều request liên tiếp
- Các URL trong kết quả đã sẵn sàng để sử dụng, không cần xử lý thêm
- Tham số `category` hiện không hoạt động đúng, nên lọc kết quả ở phía client
- Để tìm danh mục chính xác, kiểm tra từ kết quả tìm kiếm trước 