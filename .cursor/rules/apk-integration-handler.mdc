---
description: H∆∞·ªõng d·∫´n AI x·ª≠ l√Ω y√™u c·∫ßu t√≠ch h·ª£p APK t·ª´ ng∆∞·ªùi d√πng
globs: "**/*.{apk,smali,xml}"
alwaysApply: false
---

# X·ª≠ L√Ω Y√™u C·∫ßu T√≠ch H·ª£p APK
description: H∆∞·ªõng d·∫´n AI c√°ch x·ª≠ l√Ω y√™u c·∫ßu t√≠ch h·ª£p APK t·ª´ ng∆∞·ªùi d√πng
globs: "**/*.{apk,smali,xml}"

## Nh·∫≠n Di·ªán Y√™u C·∫ßu T√≠ch H·ª£p
Khi ng∆∞·ªùi d√πng y√™u c·∫ßu t√≠ch h·ª£p APK, th∆∞·ªùng s·∫Ω c√≥ d·∫°ng:
- "T√≠ch h·ª£p [package] t·ª´ [APK ngu·ªìn] v√†o [APK ƒë√≠ch]"
- "Copy package [t√™n package] t·ª´ [APK A] sang [APK B]"
- "Th√™m module [t√™n module] v√†o [APK ƒë√≠ch]"

## Quy Tr√¨nh Thu Th·∫≠p Th√¥ng Tin
Khi nh·∫≠n y√™u c·∫ßu t√≠ch h·ª£p APK, ***PH·∫¢I*** thu th·∫≠p ƒë·∫ßy ƒë·ªß c√°c th√¥ng tin sau b·∫±ng c√°ch h·ªèi tu·∫ßn t·ª±:

### 1. H·ªèi APK ngu·ªìn
N·∫øu ng∆∞·ªùi d√πng ch∆∞a cung c·∫•p APK ngu·ªìn:
```
B·∫°n vui l√≤ng cung c·∫•p ƒë∆∞·ªùng d·∫´n ƒë·∫øn file APK ngu·ªìn (ch·ª©a package c·∫ßn t√≠ch h·ª£p)?
```

### 2. H·ªèi APK ƒë√≠ch
N·∫øu ng∆∞·ªùi d√πng ch∆∞a cung c·∫•p APK ƒë√≠ch:
```
ƒê∆∞·ªùng d·∫´n ƒë·∫øn file APK ƒë√≠ch (APK c·∫ßn ƒë∆∞·ª£c t√≠ch h·ª£p package v√†o) l√† g√¨?
```

### 3. H·ªèi Package Path
N·∫øu ng∆∞·ªùi d√πng ch∆∞a cung c·∫•p package:
```
Package ho·∫∑c class path b·∫°n mu·ªën t√≠ch h·ª£p l√† g√¨? (v√≠ d·ª•: com/miui ho·∫∑c com/example/feature)
```

### 4. X√°c nh·∫≠n th√¥ng tin
Tr∆∞·ªõc khi th·ª±c hi·ªán, ***PH·∫¢I*** x√°c nh·∫≠n l·∫°i th√¥ng tin:
```
T√¥i s·∫Ω th·ª±c hi·ªán t√≠ch h·ª£p v·ªõi c√°c th√¥ng tin sau:
- APK ngu·ªìn: [ƒë∆∞·ªùng_d·∫´n_APK_ngu·ªìn]
- APK ƒë√≠ch: [ƒë∆∞·ªùng_d·∫´n_APK_ƒë√≠ch]
- Package c·∫ßn t√≠ch h·ª£p: [package_path]

B·∫°n x√°c nh·∫≠n l√† ch√≠nh x√°c ch∆∞a?
```

## C√°c B∆∞·ªõc Th·ª±c Hi·ªán
Sau khi ƒë√£ thu th·∫≠p v√† x√°c nh·∫≠n ƒë·∫ßy ƒë·ªß th√¥ng tin, AI s·∫Ω th·ª±c hi·ªán tu·∫ßn t·ª± c√°c b∆∞·ªõc sau, lu√¥n ***GI·∫¢I TH√çCH*** t·ª´ng b∆∞·ªõc ƒëang th·ª±c hi·ªán:

### B∆∞·ªõc 1: T·∫°o th∆∞ m·ª•c l√†m vi·ªác
```bash
# T·∫°o th∆∞ m·ª•c l√†m vi·ªác v·ªõi timestamp
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
WORK_DIR="apk_integration_${TIMESTAMP}"
mkdir -p "${WORK_DIR}"/{source,target,output}
```

### B∆∞·ªõc 2: Copy APK v√†o th∆∞ m·ª•c l√†m vi·ªác
```bash
cp "[ƒë∆∞·ªùng_d·∫´n_APK_ngu·ªìn]" "${WORK_DIR}/source/source.apk"
cp "[ƒë∆∞·ªùng_d·∫´n_APK_ƒë√≠ch]" "${WORK_DIR}/target/target.apk"
```

### B∆∞·ªõc 3: Decompile APK ngu·ªìn
```bash
apktool d "${WORK_DIR}/source/source.apk" -o "${WORK_DIR}/source/decompiled" -f
```

### B∆∞·ªõc 4: Decompile APK ƒë√≠ch
```bash
apktool d "${WORK_DIR}/target/target.apk" -o "${WORK_DIR}/target/decompiled" -f
```

### B∆∞·ªõc 5: Ki·ªÉm tra package trong APK ngu·ªìn
```bash
# T√¨m package trong c√°c th∆∞ m·ª•c smali
SOURCE_PACKAGE=""
for smali_dir in $(find "${WORK_DIR}/source/decompiled" -type d -name "smali*"); do
  if [ -d "${smali_dir}/[package_path]" ]; then
    SOURCE_PACKAGE="${smali_dir}/[package_path]"
    break
  fi
done

# N·∫øu kh√¥ng t√¨m th·∫•y, li·ªát k√™ c√°c package c√≥ s·∫µn
if [ -z "$SOURCE_PACKAGE" ]; then
  echo "Kh√¥ng t√¨m th·∫•y package [package_path] trong APK ngu·ªìn"
  echo "C√°c package c√≥ s·∫µn trong APK ngu·ªìn:"
  for smali_dir in $(find "${WORK_DIR}/source/decompiled" -type d -name "smali*"); do
    find "$smali_dir" -mindepth 1 -maxdepth 3 -type d | sed "s|$smali_dir/||g" | sort | uniq | head -n 10
  done
  exit 1
fi
```

### B∆∞·ªõc 6: Ph√¢n t√≠ch c·∫•u tr√∫c APK ƒë√≠ch
```bash
# T√¨m c√°c th∆∞ m·ª•c smali trong APK ƒë√≠ch
TARGET_SMALI_DIRS=()
for smali_dir in $(find "${WORK_DIR}/target/decompiled" -type d -name "smali*"); do
  TARGET_SMALI_DIRS+=("$smali_dir")
done

# Ch·ªçn th∆∞ m·ª•c smali ph√π h·ª£p ho·∫∑c t·∫°o m·ªõi
if [ ${#TARGET_SMALI_DIRS[@]} -eq 0 ]; then
  DEST_SMALI="${WORK_DIR}/target/decompiled/smali"
  mkdir -p "$DEST_SMALI"
else
  DEST_SMALI="${TARGET_SMALI_DIRS[0]}"
fi
```

### B∆∞·ªõc 7: T√≠ch h·ª£p package
```bash
# T·∫°o th∆∞ m·ª•c cha n·∫øu c·∫ßn
mkdir -p "$(dirname "${DEST_SMALI}/[package_path]")"

# Copy package
cp -r "${SOURCE_PACKAGE}" "$(dirname "${DEST_SMALI}/[package_path]")"
```

### B∆∞·ªõc 8: Ki·ªÉm tra AndroidManifest.xml
```bash
PACKAGE_DOT=$(echo "[package_path]" | tr '/' '.')
if grep -q "$PACKAGE_DOT" "${WORK_DIR}/source/decompiled/AndroidManifest.xml"; then
  echo "Package xu·∫•t hi·ªán trong AndroidManifest.xml c·ªßa APK ngu·ªìn"
  echo "B·∫°n c√≥ th·ªÉ c·∫ßn c·∫≠p nh·∫≠t AndroidManifest.xml c·ªßa APK ƒë√≠ch"
  grep -A 3 -B 3 "$PACKAGE_DOT" "${WORK_DIR}/source/decompiled/AndroidManifest.xml"
fi
```

### B∆∞·ªõc 9: Build l·∫°i APK
```bash
apktool b "${WORK_DIR}/target/decompiled" -o "${WORK_DIR}/output/integrated.apk"
```

## B√°o C√°o K·∫øt Qu·∫£
Sau khi ho√†n th√†nh, AI ***PH·∫¢I*** b√°o c√°o k·∫øt qu·∫£ v·ªõi th√¥ng tin:

```
‚úÖ T√≠ch h·ª£p ho√†n t·∫•t!

üì± APK ƒë√£ t√≠ch h·ª£p: [ƒë∆∞·ªùng_d·∫´n_APK_t√≠ch_h·ª£p]

üìã C√°c b∆∞·ªõc ti·∫øp theo:
1. K√Ω APK v·ªõi jarsigner
2. T·ªëi ∆∞u h√≥a APK v·ªõi zipalign
3. C√†i ƒë·∫∑t v√† test

‚ö†Ô∏è L∆∞u √Ω: B·∫°n c√≥ th·ªÉ c·∫ßn ki·ªÉm tra v√† c·∫≠p nh·∫≠t AndroidManifest.xml
```

## X·ª≠ L√Ω L·ªói
AI ***PH·∫¢I*** x·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn v√† cung c·∫•p th√¥ng tin h·ªØu √≠ch:

### L·ªói kh√¥ng t√¨m th·∫•y APK
```
‚ùå File APK '[ƒë∆∞·ªùng_d·∫´n]' kh√¥ng t·ªìn t·∫°i!
Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n ƒë·∫øn file APK.
```

### L·ªói kh√¥ng t√¨m th·∫•y package
```
‚ùå Kh√¥ng t√¨m th·∫•y package '[package_path]' trong APK ngu·ªìn!

C√°c package c√≥ s·∫µn trong APK ngu·ªìn:
[danh_s√°ch_packages]

Vui l√≤ng ch·ªçn package t·ª´ danh s√°ch tr√™n ho·∫∑c ki·ªÉm tra l·∫°i t√™n package.
```

### L·ªói khi build APK
```
‚ùå G·∫∑p l·ªói khi build APK!

Chi ti·∫øt l·ªói:
[log_l·ªói]

C√≥ th·ªÉ do:
1. Xung ƒë·ªôt gi·ªØa c√°c class
2. Phi√™n b·∫£n API kh√¥ng t∆∞∆°ng th√≠ch
3. Thi·∫øu resources c·∫ßn thi·∫øt

B·∫°n c√≥ mu·ªën:
1. Ki·ªÉm tra log chi ti·∫øt?
2. Th·ª≠ m·ªôt package kh√°c?
```

## Tr∆∞·ªùng H·ª£p ƒê·∫∑c Bi·ªát

### Package c·∫ßn resources
N·∫øu package c√≥ th·ªÉ y√™u c·∫ßu resources, AI ***PH·∫¢I*** c·∫£nh b√°o v√† h·ªèi ng∆∞·ªùi d√πng:
```
‚ö†Ô∏è Package n√†y c√≥ th·ªÉ y√™u c·∫ßu resources (h√¨nh ·∫£nh, layout, v.v.).
B·∫°n c√≥ mu·ªën t√¥i c≈©ng sao ch√©p c√°c resources li√™n quan kh√¥ng?
```

N·∫øu ng∆∞·ªùi d√πng ƒë·ªìng √Ω:
```bash
# T√¨m c√°c resources li√™n quan
RESOURCE_PREFIX=$(echo "[package_path]" | tr '/' '.' | cut -d '.' -f1-2)
mkdir -p "${WORK_DIR}/resources_related"
grep -r "$RESOURCE_PREFIX" "${WORK_DIR}/source/decompiled/res" --include="*.xml" -l | xargs -I{} cp {} "${WORK_DIR}/resources_related/"
```

## V√≠ D·ª• T∆∞∆°ng T√°c
D∆∞·ªõi ƒë√¢y l√† v√≠ d·ª• t∆∞∆°ng t√°c m·∫´u khi AI nh·∫≠n y√™u c·∫ßu t√≠ch h·ª£p APK:

**Ng∆∞·ªùi d√πng**: T√¥i mu·ªën t√≠ch h·ª£p module camera t·ª´ APK Xiaomi v√†o ·ª©ng d·ª•ng c·ªßa t√¥i

**AI**:
```
T√¥i s·∫Ω gi√∫p b·∫°n t√≠ch h·ª£p module camera. Vui l√≤ng cung c·∫•p c√°c th√¥ng tin sau:

B·∫°n vui l√≤ng cung c·∫•p ƒë∆∞·ªùng d·∫´n ƒë·∫øn file APK ngu·ªìn (APK ch·ª©a module camera)?
```

**Ng∆∞·ªùi d√πng**: /Users/trungkientn/Downloads/MiuiCamera.apk

**AI**:
```
C·∫£m ∆°n b·∫°n. ƒê∆∞·ªùng d·∫´n ƒë·∫øn file APK ƒë√≠ch (APK c·ªßa ·ª©ng d·ª•ng b·∫°n) l√† g√¨?
```

**Ng∆∞·ªùi d√πng**: /Users/trungkientn/MyApp/app/release/app-release.apk

**AI**:
```
Package ho·∫∑c class path c·ªßa module camera b·∫°n mu·ªën t√≠ch h·ª£p l√† g√¨? (v√≠ d·ª•: com/xiaomi/camera)
```

**Ng∆∞·ªùi d√πng**: com/xiaomi/camera

**AI**:
```
T√¥i s·∫Ω th·ª±c hi·ªán t√≠ch h·ª£p v·ªõi c√°c th√¥ng tin sau:
- APK ngu·ªìn: /Users/trungkientn/Downloads/MiuiCamera.apk
- APK ƒë√≠ch: /Users/trungkientn/MyApp/app/release/app-release.apk
- Package c·∫ßn t√≠ch h·ª£p: com/xiaomi/camera

B·∫°n x√°c nh·∫≠n l√† ch√≠nh x√°c ch·ª©?
``` 