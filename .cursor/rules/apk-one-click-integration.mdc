---
name: apk-one-click-integration
description: Quy trình tương tác để tích hợp package từ APK này sang APK khác
globs: "**/*.{apk,smali,xml}"
alwaysApply: false
---

# Quy Trình Tích Hợp APK Tương Tác
description: Quy trình tương tác để tích hợp package từ APK nguồn vào APK đích
globs: "**/*.{apk,smali,xml}"

## Nguyên Tắc Tương Tác
- ***BẮT BUỘC*** thu thập đầy đủ thông tin trước khi thực hiện
- ***BẮT BUỘC*** giải thích từng bước đang thực hiện
- ***BẮT BUỘC*** kiểm tra kết quả sau mỗi bước quan trọng
- ***KHUYẾN NGHỊ*** cung cấp thông tin hữu ích trong quá trình thực hiện

## Quy Trình Thu Thập Thông Tin
Khi nhận yêu cầu tích hợp APK, ***PHẢI*** thu thập đầy đủ các thông tin sau bằng cách hỏi tuần tự:

1. **APK Nguồn**:
   ```
   Bạn vui lòng cung cấp đường dẫn đến file APK nguồn (chứa package cần tích hợp)?
   ```

2. **APK Đích**:
   ```
   Đường dẫn đến file APK đích (APK cần được tích hợp package vào) là gì?
   ```

3. **Package/Class Path**:
   ```
   Package hoặc class path bạn muốn tích hợp là gì? (ví dụ: com/miui hoặc com/example/feature)
   ```

4. **Xác Nhận Thông Tin**:
   ```
   Tôi sẽ thực hiện tích hợp với các thông tin sau:
   - APK nguồn: [đường_dẫn_nguồn]
   - APK đích: [đường_dẫn_đích]
   - Package cần tích hợp: [package_path]
   
   Bạn xác nhận là chính xác chứ?
   ```

## Quy Trình Thực Hiện
Sau khi thu thập đủ thông tin, thực hiện các bước sau:

### 1. Tạo Thư Mục Làm Việc
```
Tôi sẽ tạo thư mục làm việc để thực hiện quá trình tích hợp.
```

```bash
# Tạo thư mục làm việc với timestamp
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
WORK_DIR="apk_integration_${TIMESTAMP}"
mkdir -p "${WORK_DIR}"/{source,target,output}
```

### 2. Copy APK Vào Thư Mục Làm Việc
```
Đang sao chép các file APK vào thư mục làm việc để đảm bảo an toàn...
```

```bash
cp "[đường_dẫn_nguồn]" "${WORK_DIR}/source/source.apk"
cp "[đường_dẫn_đích]" "${WORK_DIR}/target/target.apk"
```

### 3. Decompile APK Nguồn
```
Đang decompile APK nguồn để truy cập các file smali...
```

```bash
apktool d "${WORK_DIR}/source/source.apk" -o "${WORK_DIR}/source/decompiled" -f
```

### 4. Decompile APK Đích
```
Đang decompile APK đích...
```

```bash
apktool d "${WORK_DIR}/target/target.apk" -o "${WORK_DIR}/target/decompiled" -f
```

### 5. Kiểm Tra Package Trong APK Nguồn
```
Đang kiểm tra package '[package_path]' trong APK nguồn...
```

```bash
# Tìm package trong các thư mục smali
SOURCE_PACKAGE=""
for smali_dir in $(find "${WORK_DIR}/source/decompiled" -type d -name "smali*"); do
  if [ -d "${smali_dir}/[package_path]" ]; then
    SOURCE_PACKAGE="${smali_dir}/[package_path]"
    echo "Đã tìm thấy package tại: ${SOURCE_PACKAGE}"
    break
  fi
done
```

Nếu không tìm thấy package:
```
Không tìm thấy package '[package_path]' trong APK nguồn.
Các package có sẵn trong APK nguồn:
```

```bash
# Liệt kê các package cấp cao nhất có thể tìm thấy
for smali_dir in $(find "${WORK_DIR}/source/decompiled" -type d -name "smali*"); do
  find "$smali_dir" -mindepth 1 -maxdepth 3 -type d | sed "s|$smali_dir/||g" | sort | uniq | head -n 10
done
```

### 6. Phân Tích Cấu Trúc APK Đích
```
Đang phân tích cấu trúc smali trong APK đích để xác định vị trí tích hợp tối ưu...
```

```bash
# Tìm tất cả các thư mục smali trong APK đích
TARGET_SMALI_DIRS=()
for smali_dir in $(find "${WORK_DIR}/target/decompiled" -type d -name "smali*"); do
  TARGET_SMALI_DIRS+=("$smali_dir")
  echo "Tìm thấy thư mục smali: $(basename "$smali_dir")"
done

# Chọn thư mục smali phù hợp hoặc tạo mới
if [ ${#TARGET_SMALI_DIRS[@]} -eq 0 ]; then
  DEST_SMALI="${WORK_DIR}/target/decompiled/smali"
  mkdir -p "$DEST_SMALI"
  echo "Tạo mới thư mục smali mặc định"
else
  # Sử dụng thư mục smali đầu tiên hoặc smali_classes2 tùy theo tình huống
  DEST_SMALI="${TARGET_SMALI_DIRS[0]}"
  echo "Sẽ sử dụng thư mục: $(basename "$DEST_SMALI")"
fi
```

### 7. Tích Hợp Package
```
Đang tích hợp package '[package_path]' vào APK đích...
```

```bash
# Tạo thư mục cha nếu cần
mkdir -p "$(dirname "${DEST_SMALI}/[package_path]")"

# Copy package
cp -r "${SOURCE_PACKAGE}" "$(dirname "${DEST_SMALI}/[package_path]")"
```

### 8. Kiểm Tra AndroidManifest.xml
```
Đang kiểm tra AndroidManifest.xml để xác định xem có cần cập nhật gì không...
```

```bash
# Đổi định dạng package path từ com/example thành com.example
PACKAGE_DOT=$(echo "[package_path]" | tr '/' '.')

# Kiểm tra xem package có trong manifest của APK nguồn không
if grep -q "$PACKAGE_DOT" "${WORK_DIR}/source/decompiled/AndroidManifest.xml"; then
  echo "Package xuất hiện trong AndroidManifest.xml của APK nguồn."
  echo "Bạn có thể cần cập nhật AndroidManifest.xml của APK đích."
  
  # Hiển thị các entries liên quan
  grep -A 3 -B 3 "$PACKAGE_DOT" "${WORK_DIR}/source/decompiled/AndroidManifest.xml"
fi
```

### 9. Build Lại APK Đích
```
Đang build lại APK đích với package đã tích hợp...
```

```bash
apktool b "${WORK_DIR}/target/decompiled" -o "${WORK_DIR}/output/integrated.apk"
```

### 10. Báo Cáo Kết Quả
```
✅ Tích hợp hoàn tất!

📱 APK đã tích hợp: ${WORK_DIR}/output/integrated.apk

📋 Các bước tiếp theo:
1. Ký APK (sử dụng jarsigner)
2. Tối ưu APK (sử dụng zipalign)
3. Cài đặt và kiểm tra

⚠️ Lưu ý: Nếu package yêu cầu resources hoặc cập nhật AndroidManifest.xml, bạn cần thực hiện thêm các bước bổ sung.
```

## Xử Lý Lỗi Phổ Biến

### 1. Lỗi Decompile APK
```
Đã xảy ra lỗi khi decompile APK. Đây có thể do:
1. APK được bảo vệ hoặc đóng gói
2. Phiên bản apktool không tương thích
3. APK bị hỏng

Bạn có muốn thử với các tùy chọn khác không?
```

### 2. Lỗi Build APK
```
Đã xảy ra lỗi khi build lại APK đích. Nguyên nhân có thể là:
1. Xung đột giữa các class
2. Phiên bản SDK không tương thích
3. Thiếu resources cần thiết

Log lỗi:
[hiển_thị_log_lỗi]

Bạn có muốn thử một phương pháp khác không?
```

## Trường Hợp Đặc Biệt

### 1. Tích Hợp Nhiều Package
Nếu cần tích hợp nhiều package liên quan, hướng dẫn:
```
Bạn muốn tích hợp nhiều package. Chúng ta sẽ thực hiện lần lượt cho từng package:
1. [package1]
2. [package2]
3. [package3]

Tôi sẽ bắt đầu với package đầu tiên.
```

### 2. Package Có Resources
Nếu package cần resources:
```
Package này có thể yêu cầu resources (hình ảnh, layout, strings, v.v.).
Các resources này nằm trong thư mục 'res' của APK nguồn.

Bạn có muốn tôi cũng sao chép các resources liên quan không?
```

Nếu người dùng đồng ý:
```bash
# Tìm các resources liên quan (ví dụ dựa trên namespace)
RESOURCE_PREFIX=$(echo "[package_path]" | tr '/' '.' | cut -d '.' -f1-2)
mkdir -p "${WORK_DIR}/resources_related"

# Tìm và copy các resources liên quan
grep -r "$RESOURCE_PREFIX" "${WORK_DIR}/source/decompiled/res" --include="*.xml" -l | xargs -I{} cp {} "${WORK_DIR}/resources_related/"

echo "Đã tìm thấy $(ls "${WORK_DIR}/resources_related/" | wc -l) resources có thể liên quan."
echo "Bạn cần kiểm tra và tích hợp thủ công các resources này."
```

## Ví Dụ Tương Tác

**Người dùng:** Tôi muốn tích hợp một package từ APK này sang APK khác

**AI:**
```
Tôi sẽ giúp bạn tích hợp package từ APK nguồn sang APK đích. Để bắt đầu, vui lòng cung cấp các thông tin sau:

Bạn vui lòng cung cấp đường dẫn đến file APK nguồn (chứa package cần tích hợp)?
```

**Người dùng:** /Users/trungkientn/Downloads/MiuiCamera.apk

**AI:**
```
Cảm ơn bạn. Đường dẫn đến file APK đích (APK cần được tích hợp package vào) là gì?
```

**Người dùng:** /Users/trungkientn/Projects/MyApp/app/release/app-release.apk

**AI:**
```
Package hoặc class path bạn muốn tích hợp là gì? (ví dụ: com/miui hoặc com/example/feature)
```

**Người dùng:** com/xiaomi/camera

**AI:**
```
Tôi sẽ thực hiện tích hợp với các thông tin sau:
- APK nguồn: /Users/trungkientn/Downloads/MiuiCamera.apk
- APK đích: /Users/trungkientn/Projects/MyApp/app/release/app-release.apk
- Package cần tích hợp: com/xiaomi/camera

Bạn xác nhận là chính xác chứ?
```

... (quá trình tiếp tục theo quy trình ở trên) 