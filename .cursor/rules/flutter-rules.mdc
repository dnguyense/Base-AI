---
description: Comprehensive rules for Flutter app development
globs: "*.dart"
alwaysApply: false
---
# Flutter Development Rules
description: Comprehensive rules for Flutter app development
globs: "*.dart"

## Architecture & Project Structure
- Use feature-first or layer-first architecture
- Implement clean architecture with domain, data, and presentation layers
- Organize widgets by feature
- Keep widget files small and focused
- Use proper folder structure (lib/features, lib/core, etc.)
- Separate UI from business logic
- Use barrel files (index.dart) for cleaner imports
- Follow dependency inversion principle
- Create reusable core components
- Implement proper routing strategy

## State Management
- Choose appropriate state management for the project (Bloc, Provider, Riverpod, GetX)
- Use Bloc pattern for complex state management
- Implement proper event handling in Bloc
- Use Provider for simpler state management
- Implement proper state immutability
- Avoid state management in widgets when possible
- Use proper dependency injection with get_it or injectable
- Follow unidirectional data flow principles
- Implement proper error handling in state management
- Use proper state initialization

## Widget Design
- Keep widgets small and focused
- Use composition over inheritance
- Create reusable widgets
- Use const constructors for immutable widgets
- Implement proper widget lifecycle management
- Use proper callback functions
- Implement proper widget keys when needed
- Use proper named parameters in constructors
- Create builder widgets for flexibility
- Use proper factory constructors

## Performance Optimization
- Use const constructors wherever possible
- Minimize setState() calls
- Use ListView.builder for long lists
- Implement pagination for large data sets
- Use proper image caching
- Optimize build methods
- Use RepaintBoundary when appropriate
- Implement proper memory management
- Use DevTools for performance profiling
- Optimize animations for smooth performance
- Use proper lazy loading techniques
- Implement proper widget rebuilding strategies
- Use ValueNotifier for small state changes

## Styling & Theming
- Use proper theme configuration
- Implement dark mode support
- Use proper text themes
- Create reusable style components
- Use proper responsive design
- Implement proper media queries
- Use proper asset management
- Follow Material Design or Cupertino guidelines
- Implement proper localization
- Use proper font management
- Implement proper color systems
- Use proper spacing constants
- Create reusable decorations

## API & Data Handling
- Use repository pattern for data access
- Implement proper API client with Dio or http
- Use proper error handling for API calls
- Implement proper caching strategy
- Use proper JSON serialization with json_serializable
- Implement proper pagination
- Use proper retry mechanism for failed requests
- Implement proper offline mode
- Use proper data transformation with mappers
- Implement proper data validation
- Use freezed for immutable models
- Implement proper loading state indicators
- Use proper pull-to-refresh implementation

## Navigation & Routing
- Use proper routing system (Go Router, Auto Route)
- Implement proper deep linking
- Use proper route parameters
- Implement proper route guards
- Use proper navigation state management
- Implement proper tab navigation
- Use proper bottom navigation
- Implement proper modal and dialog handling
- Use proper navigation transitions
- Implement proper web URL strategy (if web app)

## Forms & Validation
- Use proper form validation
- Implement proper form state management
- Use proper input decoration
- Implement proper form submission logic
- Use proper error messaging
- Implement proper focus management
- Use proper keyboard type for inputs
- Implement proper form field dependencies
- Use proper reactive forms when needed
- Implement proper input masking

## Testing
- Write proper widget tests
- Implement proper unit tests for business logic
- Use proper mocking with mocktail
- Implement proper integration tests
- Use proper golden tests for UI
- Implement proper test data factories
- Use proper test coverage
- Implement proper CI/CD for tests
- Use proper test fixtures
- Implement proper test double strategy

## Platform Integration
- Use proper platform channels for native code
- Implement proper permission handling
- Use proper file system access
- Implement proper camera and gallery access
- Use proper biometric authentication
- Implement proper push notifications
- Use proper geolocation services
- Implement proper in-app purchases
- Use proper deep linking
- Implement proper app lifecycle handling

## Internationalization & Accessibility
- Use proper intl package for localization
- Implement proper RTL support
- Use proper semantic labels for accessibility
- Implement proper screen reader support
- Use proper text scaling
- Implement proper color contrast
- Use proper focus order
- Implement proper keyboard navigation
- Use proper localized formats (dates, numbers)
- Implement proper language selection

## Local Storage
- Use proper shared preferences for simple data
- Implement proper secure storage for sensitive data
- Use proper SQLite with drift for complex data
- Implement proper Hive for NoSQL storage
- Use proper file storage
- Implement proper data migration strategy
- Use proper data backup strategy
- Implement proper data encryption
- Use proper data synchronization
- Implement proper data versioning

## Error Handling & Logging
- Implement proper global error handling
- Use proper logger (logger package)
- Implement proper error boundaries
- Use proper crash reporting (Firebase Crashlytics)
- Implement proper error recovery
- Use proper user-facing error messages
- Implement proper network error handling
- Use proper error tracking
- Implement proper retry mechanisms
- Use proper fallback UI for errors

## Firebase Integration
- Use proper Firebase Authentication
- Implement proper Firestore usage
- Use proper Firebase Storage
- Implement proper Firebase Cloud Messaging
- Use proper Firebase Analytics
- Implement proper Firebase Remote Config
- Use proper Firebase performance monitoring
- Implement proper Firebase Dynamic Links
- Use proper Firebase Cloud Functions
- Implement proper Firebase App Check

@file ../README.md 