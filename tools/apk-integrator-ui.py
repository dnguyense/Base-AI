#!/usr/bin/env python3
"""
APK Module Integrator - UI Version
Giao di·ªán ƒë·ªì h·ªça ƒë∆°n gi·∫£n cho c√¥ng c·ª• t√≠ch h·ª£p module APK
"""

import os
import sys
import shutil
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from datetime import datetime

def create_backup(project_dir, module_name):
    """T·∫°o backup c·ªßa project tr∆∞·ªõc khi t√≠ch h·ª£p module."""
    backup_dir = os.path.join(project_dir, "_backups", datetime.now().strftime("%Y-%m-%d_%H-%M-%S") + "_" + module_name)
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
    
    # Backup c√°c file quan tr·ªçng (m·ªü r·ªông khi c·∫ßn)
    for folder in [f for f in os.listdir(project_dir) if f.startswith("smali")]:
        src = os.path.join(project_dir, folder)
        dst = os.path.join(backup_dir, folder)
        if os.path.isdir(src):
            shutil.copytree(src, dst)
    
    # Backup AndroidManifest.xml
    manifest_file = os.path.join(project_dir, "AndroidManifest.xml")
    if os.path.exists(manifest_file):
        shutil.copy2(manifest_file, os.path.join(backup_dir, "AndroidManifest.xml"))
    
    return backup_dir

def analyze_smali_structure(project_dir):
    """Ph√¢n t√≠ch c·∫•u tr√∫c smali_classes trong project."""
    smali_folders = [folder for folder in os.listdir(project_dir) 
                    if folder.startswith("smali_classes") or folder == "smali"]
    smali_folders.sort()
    
    if not smali_folders:
        return "smali", []
    
    # X√°c ƒë·ªãnh th∆∞ m·ª•c smali ti·∫øp theo
    if len(smali_folders) == 1 and smali_folders[0] == "smali":
        next_folder = "smali_classes2"
    else:
        # T√¨m s·ªë l·ªõn nh·∫•t trong c√°c th∆∞ m·ª•c smali_classes
        max_number = 1
        for folder in smali_folders:
            if folder != "smali":
                try:
                    number = int(folder.replace("smali_classes", ""))
                    max_number = max(max_number, number)
                except ValueError:
                    continue
        next_folder = f"smali_classes{max_number + 1}"
    
    return next_folder, smali_folders

def integrate_module(module_path, module_folder_name, project_dir, next_smali_folder, log_func=print):
    """T√≠ch h·ª£p module v√†o project."""
    source_path = os.path.join(module_path, module_folder_name)
    if not os.path.exists(source_path):
        log_func(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c module: {source_path}")
        return False
    
    target_folder = os.path.join(project_dir, next_smali_folder)
    if not os.path.exists(target_folder):
        os.makedirs(target_folder)
    
    target_path = os.path.join(target_folder, module_folder_name)
    
    log_func(f"üîÑ T√≠ch h·ª£p module t·ª´: {source_path}")
    log_func(f"‚û°Ô∏è ƒê·∫øn: {target_path}")
    
    # T·∫°o th∆∞ m·ª•c ƒë√≠ch n·∫øu ch∆∞a t·ªìn t·∫°i
    if os.path.exists(target_path):
        log_func(f"‚ö†Ô∏è Th∆∞ m·ª•c ƒë√≠ch ƒë√£ t·ªìn t·∫°i, ƒëang x√≥a ƒë·ªÉ thay th·∫ø...")
        shutil.rmtree(target_path)
    
    # Copy module
    shutil.copytree(source_path, target_path)
    
    log_func(f"‚úÖ T√≠ch h·ª£p module th√†nh c√¥ng!")
    return True

class APKIntegratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("APK Module Integrator")
        self.root.geometry("800x600")
        self.root.minsize(700, 500)
        
        self.create_widgets()
        
    def create_widgets(self):
        # Frame ch√≠nh
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Ti√™u ƒë·ªÅ
        title_label = ttk.Label(main_frame, text="APK Module Integrator", font=("Arial", 16, "bold"))
        title_label.pack(pady=10)
        
        # Frame cho c√°c input
        input_frame = ttk.LabelFrame(main_frame, text="C·∫•u h√¨nh", padding="10")
        input_frame.pack(fill=tk.X, pady=10)
        
        # Project directory
        ttk.Label(input_frame, text="Th∆∞ m·ª•c d·ª± √°n APK ƒë√≠ch:").grid(row=0, column=0, sticky=tk.W, pady=5)
        self.project_dir_frame = ttk.Frame(input_frame)
        self.project_dir_frame.grid(row=0, column=1, sticky=tk.W+tk.E, pady=5)
        self.project_dir_entry = ttk.Entry(self.project_dir_frame, width=50)
        self.project_dir_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        ttk.Button(self.project_dir_frame, text="Ch·ªçn...", command=self.browse_project_dir).pack(side=tk.RIGHT, padx=5)
        
        # Module path
        ttk.Label(input_frame, text="Th∆∞ m·ª•c module ngu·ªìn:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.module_path_frame = ttk.Frame(input_frame)
        self.module_path_frame.grid(row=1, column=1, sticky=tk.W+tk.E, pady=5)
        self.module_path_entry = ttk.Entry(self.module_path_frame, width=50)
        self.module_path_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        ttk.Button(self.module_path_frame, text="Ch·ªçn...", command=self.browse_module_path).pack(side=tk.RIGHT, padx=5)
        
        # Module folder name
        ttk.Label(input_frame, text="T√™n th∆∞ m·ª•c module:").grid(row=2, column=0, sticky=tk.W, pady=5)
        self.module_folder_entry = ttk.Entry(input_frame, width=20)
        self.module_folder_entry.grid(row=2, column=1, sticky=tk.W, pady=5)
        
        # N√∫t Analyze
        ttk.Button(input_frame, text="Ph√¢n T√≠ch C·∫•u Tr√∫c", command=self.analyze_structure).grid(row=3, column=0, pady=10)
        
        # Frame cho k·∫øt qu·∫£ ph√¢n t√≠ch
        self.analysis_frame = ttk.LabelFrame(main_frame, text="K·∫øt Qu·∫£ Ph√¢n T√≠ch", padding="10")
        self.analysis_frame.pack(fill=tk.X, pady=10)
        
        # Hi·ªÉn th·ªã smali folders
        ttk.Label(self.analysis_frame, text="Th∆∞ m·ª•c smali hi·ªán c√≥:").grid(row=0, column=0, sticky=tk.W, pady=5)
        self.smali_folders_var = tk.StringVar()
        ttk.Label(self.analysis_frame, textvariable=self.smali_folders_var).grid(row=0, column=1, sticky=tk.W, pady=5)
        
        # Hi·ªÉn th·ªã next smali folder
        ttk.Label(self.analysis_frame, text="Th∆∞ m·ª•c ƒë√≠ch ƒë·ªÅ xu·∫•t:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.next_folder_var = tk.StringVar()
        self.next_folder_combo = ttk.Combobox(self.analysis_frame, textvariable=self.next_folder_var, width=20)
        self.next_folder_combo.grid(row=1, column=1, sticky=tk.W, pady=5)
        
        # Log area
        log_frame = ttk.LabelFrame(main_frame, text="Log", padding="10")
        log_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        self.log_text = tk.Text(log_frame, height=10, width=80, wrap=tk.WORD)
        self.log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        scrollbar = ttk.Scrollbar(log_frame, command=self.log_text.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.log_text.config(yscrollcommand=scrollbar.set)
        
        # N√∫t th·ª±c thi
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=10)
        
        ttk.Button(button_frame, text="T√≠ch H·ª£p Module", command=self.integrate).pack(side=tk.RIGHT, padx=5)
        ttk.Button(button_frame, text="T·∫°o Backup", command=self.create_backup_only).pack(side=tk.RIGHT, padx=5)
        
        # Status bar
        self.status_var = tk.StringVar()
        self.status_var.set("S·∫µn s√†ng")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, relief=tk.SUNKEN, anchor=tk.W)
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)
    
    def log(self, message):
        self.log_text.insert(tk.END, message + "\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()
    
    def browse_project_dir(self):
        directory = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c d·ª± √°n APK ƒë√≠ch")
        if directory:
            self.project_dir_entry.delete(0, tk.END)
            self.project_dir_entry.insert(0, directory)
    
    def browse_module_path(self):
        directory = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c module ngu·ªìn")
        if directory:
            self.module_path_entry.delete(0, tk.END)
            self.module_path_entry.insert(0, directory)
            
            # T·ª± ƒë·ªông t√¨m c√°c th∆∞ m·ª•c ti·ªÅm nƒÉng trong module
            self.suggest_module_folders(directory)
    
    def suggest_module_folders(self, module_path):
        """G·ª£i √Ω c√°c th∆∞ m·ª•c ti·ªÅm nƒÉng trong module path"""
        if not os.path.exists(module_path):
            return
        
        # T√¨m c√°c th∆∞ m·ª•c smali
        smali_dir = None
        for folder in os.listdir(module_path):
            if folder.startswith("smali"):
                smali_dir = os.path.join(module_path, folder)
                break
        
        if not smali_dir or not os.path.isdir(smali_dir):
            return
        
        # T√¨m c√°c package ti·ªÅm nƒÉng (th∆∞ m·ª•c con ƒë·∫ßu ti√™n trong smali)
        potential_modules = []
        for item in os.listdir(smali_dir):
            if os.path.isdir(os.path.join(smali_dir, item)) and not item.startswith("."):
                potential_modules.append(item)
        
        if potential_modules:
            # Hi·ªÉn th·ªã dialog ƒë·ªÉ ch·ªçn
            if len(potential_modules) == 1:
                self.module_folder_entry.delete(0, tk.END)
                self.module_folder_entry.insert(0, potential_modules[0])
            else:
                selected = self.show_folder_selection_dialog(potential_modules)
                if selected:
                    self.module_folder_entry.delete(0, tk.END)
                    self.module_folder_entry.insert(0, selected)
    
    def show_folder_selection_dialog(self, folders):
        """Hi·ªÉn th·ªã dialog ƒë·ªÉ ch·ªçn th∆∞ m·ª•c module"""
        dialog = tk.Toplevel(self.root)
        dialog.title("Ch·ªçn th∆∞ m·ª•c module")
        dialog.geometry("300x300")
        dialog.transient(self.root)
        dialog.grab_set()
        
        ttk.Label(dialog, text="Ch·ªçn th∆∞ m·ª•c module c·∫ßn t√≠ch h·ª£p:").pack(pady=10)
        
        listbox = tk.Listbox(dialog, width=40, height=10)
        listbox.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        for folder in folders:
            listbox.insert(tk.END, folder)
        
        result = [None]  # S·ª≠ d·ª•ng list ƒë·ªÉ c√≥ th·ªÉ thay ƒë·ªïi gi√° tr·ªã trong h√†m callback
        
        def on_select():
            selection = listbox.curselection()
            if selection:
                result[0] = folders[selection[0]]
            dialog.destroy()
        
        ttk.Button(dialog, text="Ch·ªçn", command=on_select).pack(pady=10)
        
        self.root.wait_window(dialog)
        return result[0]
    
    def analyze_structure(self):
        project_dir = self.project_dir_entry.get()
        if not project_dir or not os.path.exists(project_dir):
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c d·ª± √°n h·ª£p l·ªá!")
            return
        
        self.log("üîç ƒêang ph√¢n t√≠ch c·∫•u tr√∫c smali trong d·ª± √°n...")
        
        next_folder, smali_folders = analyze_smali_structure(project_dir)
        
        if not smali_folders:
            self.smali_folders_var.set("Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c smali")
            self.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c smali trong d·ª± √°n!")
        else:
            self.smali_folders_var.set(", ".join(smali_folders))
            self.log(f"üìÅ T√¨m th·∫•y c√°c th∆∞ m·ª•c: {', '.join(smali_folders)}")
        
        # C·∫≠p nh·∫≠t combo box v·ªõi c√°c l·ª±a ch·ªçn th∆∞ m·ª•c
        options = [next_folder]
        for i in range(1, 10):
            folder_name = f"smali_classes{i}"
            if folder_name not in smali_folders:
                options.append(folder_name)
        
        self.next_folder_combo["values"] = options
        self.next_folder_var.set(next_folder)
        
        self.log(f"üìÅ Th∆∞ m·ª•c ƒë√≠ch ƒë·ªÅ xu·∫•t: {next_folder}")
        self.status_var.set(f"ƒê√£ ph√¢n t√≠ch c·∫•u tr√∫c. Th∆∞ m·ª•c ƒë√≠ch ƒë·ªÅ xu·∫•t: {next_folder}")
    
    def create_backup_only(self):
        project_dir = self.project_dir_entry.get()
        module_name = self.module_folder_entry.get() or "manual_backup"
        
        if not project_dir or not os.path.exists(project_dir):
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c d·ª± √°n h·ª£p l·ªá!")
            return
        
        self.log("üì¶ ƒêang t·∫°o backup...")
        backup_dir = create_backup(project_dir, module_name)
        self.log(f"‚úÖ ƒê√£ t·∫°o backup t·∫°i: {backup_dir}")
        self.status_var.set(f"ƒê√£ t·∫°o backup t·∫°i: {backup_dir}")
    
    def integrate(self):
        project_dir = self.project_dir_entry.get()
        module_path = self.module_path_entry.get()
        module_folder = self.module_folder_entry.get()
        next_folder = self.next_folder_var.get()
        
        if not project_dir or not os.path.exists(project_dir):
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c d·ª± √°n h·ª£p l·ªá!")
            return
        
        if not module_path or not os.path.exists(module_path):
            messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c module ngu·ªìn h·ª£p l·ªá!")
            return
        
        if not module_folder:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p t√™n th∆∞ m·ª•c module!")
            return
        
        # X√°c nh·∫≠n tr∆∞·ªõc khi th·ª±c hi·ªán
        if not messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t√≠ch h·ª£p module '{module_folder}' v√†o th∆∞ m·ª•c '{next_folder}' kh√¥ng?"):
            return
        
        # T·∫°o backup
        self.log("\n== B·∫Øt ƒë·∫ßu quy tr√¨nh t√≠ch h·ª£p ==")
        self.log("üì¶ ƒêang t·∫°o backup...")
        backup_dir = create_backup(project_dir, module_folder)
        self.log(f"‚úÖ ƒê√£ t·∫°o backup t·∫°i: {backup_dir}")
        
        # T√≠ch h·ª£p module
        self.log("\nüîÑ ƒêang t√≠ch h·ª£p module...")
        self.status_var.set("ƒêang t√≠ch h·ª£p module...")
        
        success = integrate_module(module_path, module_folder, project_dir, next_folder, self.log)
        
        if success:
            self.log("\nüéâ T√≠ch h·ª£p module ho√†n t·∫•t!")
            self.log(f"üìù Module {module_folder} ƒë√£ ƒë∆∞·ª£c t√≠ch h·ª£p v√†o {next_folder}/")
            self.log("\nüî∏ B∆∞·ªõc ti·∫øp theo:")
            self.log("  1. Ki·ªÉm tra t√≠nh t∆∞∆°ng th√≠ch c·ªßa module")
            self.log("  2. C·∫≠p nh·∫≠t AndroidManifest.xml n·∫øu c·∫ßn")
            self.log("  3. Bi√™n d·ªãch l·∫°i APK: apktool b . -o ../upgraded.apk")
            self.log("  4. K√Ω v√† t·ªëi ∆∞u APK")
            
            self.status_var.set(f"ƒê√£ t√≠ch h·ª£p module {module_folder} v√†o {next_folder}/")
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ t√≠ch h·ª£p module {module_folder} v√†o {next_folder}/")
        else:
            self.log("\n‚ùå T√≠ch h·ª£p module th·∫•t b·∫°i!")
            self.status_var.set("T√≠ch h·ª£p th·∫•t b·∫°i!")
            messagebox.showerror("L·ªói", "T√≠ch h·ª£p module th·∫•t b·∫°i! Vui l√≤ng ki·ªÉm tra log ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.")

def main():
    root = tk.Tk()
    app = APKIntegratorApp(root)
    root.mainloop()

if __name__ == "__main__":
    main() 