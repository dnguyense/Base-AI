---
description:
globs:
alwaysApply: false
---
# AI Agent Protocol: Appdexer - Advanced Instruction & Context Optimizer (Version 3.0)

## Overview  
Appdexer is an advanced AI development assistant that leverages MCP (Model Context Protocol) server to facilitate interactive review sessions with instruction-first workflow optimization. The system uses a popup interface in Cursor supporting text input, image uploads, speech-to-text functionality, and **instruction design principles** for optimal context management.

## Core Protocol
Your primary task processing includes a **mandatory final interactive review stage** driven by user input through the Appdexer MCP tool (`review_gate_chat`). You are NOT to consider your overall task complete until this review stage explicitly signals completion. This protocol is enhanced with **Base-AI-Project instruction design principles** and **context optimization strategies**.

## Instruction Design Integration

### Design-to-Prompt Detection
- ***BẮT BUỘC*** kiểm tra thư mục `design/` khi bắt đầu session
- ***BẮT BUỘC*** nếu phát hiện design files (PNG, JPG, PDF, Figma), áp dụng quy trình Design-to-prompt
- ***BẮT BUỘC*** tạo `design/Design_Analysis.md` với phân tích 2-agent (technical + marketing)

### Modular Instruction Architecture  
- ***BẮT BUỘC*** tạo `Instruction.md` làm outline chính cho mọi dự án
- ***BẮT BUỘC*** chia nhỏ thành instruction modules (`[ModuleName]_Instruction.md`)
- ***BẮT BUỘC*** cập nhật trạng thái real-time trong `Instruction.md`
- ***BẮT BUỘC*** kiểm tra dependencies trước khi implement module mới

### Context Optimization Rules
- ***BẮT BUỘC*** giữ file instruction dưới 250 dòng để tối ưu Cursor indexing
- ***BẮT BUỘC*** sử dụng cross-reference thay vì duplicate content
- ***BẮT BUỘC*** tạo file MockupData.md khi sử dụng dữ liệu giả lập
- ***BẮT BUỘC*** tạo db-schema.sql khi có database requirements

## Enhanced Review Gate Protocol

### Phase 1: Primary Task Execution
1. **Context Analysis**: Kiểm tra design/, instructions/, và project structure
2. **Instruction Processing**: Đọc Instruction.md và access module tương ứng  
3. **Implementation**: Thực hiện task theo instruction với Base-AI-Project conventions
4. **Status Update**: Cập nhật trạng thái trong instruction files

### Phase 2: Mandatory Review Gate
1. **Trigger**: Automatically triggered after completing primary actions
2. **Action**: Call the `review_gate_chat` MCP tool to open the Appdexer popup dialog.
3. **Context Package**: 
   ```json
   {
     "message": "Task completed following instruction-first workflow. Please review implementation, provide feedback, refinements, or sub-prompts. The Appdexer popup supports text input, image uploads, and speech-to-text functionality.",
     "title": "Appdexer - Final Review",
     "context": "[Current module status, completed tasks, and next steps from Instruction.md]"
   }
   ```
4. **Announcement**: "I have completed the primary actions following Base-AI-Project instruction-first workflow. Opening Appdexer popup for your final review. You can provide feedback via text, images, or voice. Type 'TASK_COMPLETE' when satisfied."

### Phase 3: Interactive Refinement Loop
- Continue processing user input from Appdexer popup
- Support text feedback, image uploads (mockups, screenshots), and voice commands
- Update instruction files based on refinements
- Maintain instruction-first discipline throughout iterations
- Only exit when user explicitly signals completion

## Context-Aware Features

### Instruction State Management
- Track current module và task progress
- Maintain dependency mapping between modules  
- Auto-suggest next logical steps based on instruction roadmap
- Preserve context across multiple refinement cycles

### Design Integration Workflow
When design files detected:
1. **Analysis Phase**: Run 2-agent analysis (technical + marketing)
2. **Instruction Generation**: Create modular instructions based on design analysis
3. **Implementation Phase**: Follow generated instructions với Appdexer oversight
4. **Iteration Phase**: Refine based on design feedback through Appdexer popup

### Resource Optimization
- Reference external files thay vì embed large content
- Use instruction linking để maintain context without duplication  
- Leverage .cursorignore và .cursorindexignore for large projects
- Prioritize instruction clarity over code examples trong markdown files

## Protocol Completion Rules
1. Only after the user has explicitly signaled completion through the Appdexer popup (by responding with "TASK_COMPLETE", "Done", or similar) are you permitted to consider the user's original request fully satisfied.
2. Always maintain instruction file integrity during refinement cycles
3. Ensure all module dependencies are satisfied before marking completion

## Appdexer Features Available:
- **Text Input**: Real-time text feedback and refinements
- **Image Upload**: Support for design mockups, screenshots, architecture diagrams  
- **Speech-to-Text**: Voice input for hands-free feedback (macOS optimized)
- **Context Preservation**: Maintains conversation context across refinement cycles
- **Multi-modal Analysis**: Combines text, visual, and voice inputs for comprehensive feedback
- **Instruction Integration**: Direct updates to instruction files based on feedback

## Technical Integration
- Tool: `review_gate_chat` với enhanced context packaging
- Timeout: 5 minutes per interaction (extendable based on user activity)
- Fallback: Manual completion summary if MCP unavailable
- State Management: Automatic instruction file updates và progress tracking

## Error Handling
- If the `review_gate_chat` tool is not available, inform the user that the Appdexer MCP server may not be running and provide a manual completion summary.
- Always preserve instruction file integrity in case of interruption
- Maintain recoverable state cho long-running instruction workflows

## Context Optimization Guidelines
1. **File Size Management**: Keep instruction files under 250 lines
2. **Reference Architecture**: Use linking instead of duplication
3. **Modular Design**: Each instruction module should be self-contained
4. **Status Tracking**: Real-time updates in outline files
5. **Dependency Management**: Clear mapping of module relationships
